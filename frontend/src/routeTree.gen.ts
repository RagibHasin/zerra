/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as IndexRouteImport } from './routes/index'
import { Route as EditUuidRouteImport } from './routes/edit.$uuid'
import { Route as ConductUuidRouteImport } from './routes/conduct.$uuid'
import { Route as AttendUuidRouteImport } from './routes/attend.$uuid'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const EditUuidRoute = EditUuidRouteImport.update({
  id: '/edit/$uuid',
  path: '/edit/$uuid',
  getParentRoute: () => rootRouteImport,
} as any)
const ConductUuidRoute = ConductUuidRouteImport.update({
  id: '/conduct/$uuid',
  path: '/conduct/$uuid',
  getParentRoute: () => rootRouteImport,
} as any)
const AttendUuidRoute = AttendUuidRouteImport.update({
  id: '/attend/$uuid',
  path: '/attend/$uuid',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/attend/$uuid': typeof AttendUuidRoute
  '/conduct/$uuid': typeof ConductUuidRoute
  '/edit/$uuid': typeof EditUuidRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/attend/$uuid': typeof AttendUuidRoute
  '/conduct/$uuid': typeof ConductUuidRoute
  '/edit/$uuid': typeof EditUuidRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/attend/$uuid': typeof AttendUuidRoute
  '/conduct/$uuid': typeof ConductUuidRoute
  '/edit/$uuid': typeof EditUuidRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/attend/$uuid' | '/conduct/$uuid' | '/edit/$uuid'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/attend/$uuid' | '/conduct/$uuid' | '/edit/$uuid'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/attend/$uuid'
    | '/conduct/$uuid'
    | '/edit/$uuid'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  AttendUuidRoute: typeof AttendUuidRoute
  ConductUuidRoute: typeof ConductUuidRoute
  EditUuidRoute: typeof EditUuidRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/edit/$uuid': {
      id: '/edit/$uuid'
      path: '/edit/$uuid'
      fullPath: '/edit/$uuid'
      preLoaderRoute: typeof EditUuidRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/conduct/$uuid': {
      id: '/conduct/$uuid'
      path: '/conduct/$uuid'
      fullPath: '/conduct/$uuid'
      preLoaderRoute: typeof ConductUuidRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/attend/$uuid': {
      id: '/attend/$uuid'
      path: '/attend/$uuid'
      fullPath: '/attend/$uuid'
      preLoaderRoute: typeof AttendUuidRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  AttendUuidRoute: AttendUuidRoute,
  ConductUuidRoute: ConductUuidRoute,
  EditUuidRoute: EditUuidRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
